# Python Pipeline Template
# Extends base-pipeline.yml with Python specific configurations

# Include base template
include: base-pipeline.yml

# Python specific variables
variables:
  - &python_version "3.11"
  - &python_image "python:3.11-slim"
  - &pip_cache_dir ".cache/pip"
  - &build_image *python_image

# Override base steps with Python implementations
steps:
  # Cache restoration
  restore-cache:
    image: meltwater/drone-cache:latest
    settings:
      backend: "filesystem"
      restore: true
      cache_key: "python-${DRONE_REPO_NAME}-{{ checksum \"requirements.txt\" }}"
      mount:
        - .cache/pip
        - venv
    when:
      - event: [push, pull_request]

  # Install dependencies
  install:
    image: *python_image
    environment:
      - PIP_CACHE_DIR=.cache/pip
    commands:
      - python --version
      - pip --version
      - |
        # Create virtual environment if needed
        if [ ! -f "Pipfile" ] && [ ! -f "pyproject.toml" ]; then
          python -m venv venv
          . venv/bin/activate
        fi
      - |
        # Install dependencies based on project type
        if [ -f "Pipfile" ]; then
          pip install pipenv
          pipenv install --dev --deploy
        elif [ -f "pyproject.toml" ]; then
          pip install poetry
          poetry install
        else
          pip install -r requirements.txt
          [ -f "requirements-dev.txt" ] && pip install -r requirements-dev.txt
        fi
      - pip list
    when:
      - event: [push, pull_request]
    depends_on:
      - restore-cache

  # Code formatting check (Black)
  format-check:
    image: *python_image
    commands:
      - |
        if [ -f "venv/bin/activate" ]; then . venv/bin/activate; fi
        pip install black
        black --check --diff .
    when:
      - event: [push, pull_request]
    depends_on:
      - install

  # Import sorting check (isort)
  import-sort:
    image: *python_image
    commands:
      - |
        if [ -f "venv/bin/activate" ]; then . venv/bin/activate; fi
        pip install isort
        isort --check-only --diff .
    when:
      - event: [push, pull_request]
    depends_on:
      - install

  # Linting (Flake8)
  lint:
    image: *python_image
    commands:
      - |
        if [ -f "venv/bin/activate" ]; then . venv/bin/activate; fi
        pip install flake8 flake8-docstrings flake8-bugbear
        flake8 . --max-line-length=88 --extend-ignore=E203,W503
    when:
      - event: [push, pull_request]
    depends_on:
      - install

  # Type checking (mypy)
  type-check:
    image: *python_image
    commands:
      - |
        if [ -f "venv/bin/activate" ]; then . venv/bin/activate; fi
        pip install mypy
        mypy . --python-version ${PYTHON_VERSION} || mypy src/ app/ --python-version ${PYTHON_VERSION}
    when:
      - event: [push, pull_request]
    depends_on:
      - install

  # Security scanning (Bandit)
  security-scan:
    image: *python_image
    commands:
      - |
        if [ -f "venv/bin/activate" ]; then . venv/bin/activate; fi
        pip install bandit
        bandit -r . -f json -o bandit-report.json || true
        cat bandit-report.json | python -m json.tool
    when:
      - event: [push, pull_request]
    depends_on:
      - install
    failure: ignore

  # Dependency security check (Safety)
  dependency-check:
    image: *python_image
    commands:
      - |
        if [ -f "venv/bin/activate" ]; then . venv/bin/activate; fi
        pip install safety
        safety check --json || echo "Some vulnerabilities found"
    when:
      - event: push
      - branch: [main, develop]
    depends_on:
      - install
    failure: ignore

  # Unit tests with coverage
  test:
    image: *python_image
    environment:
      - PYTHONPATH=.
      - DATABASE_URL=postgresql://test:test@postgres:5432/test_db
      - REDIS_URL=redis://redis:6379
    commands:
      - |
        if [ -f "venv/bin/activate" ]; then . venv/bin/activate; fi
        pip install pytest pytest-cov pytest-asyncio pytest-mock
        pytest -v --cov=. --cov-report=term-missing --cov-report=html --cov-report=xml
        echo "Coverage Summary:"
        coverage report || true
    when:
      - event: [push, pull_request]
    depends_on:
      - install

  # Build distribution packages
  build:
    image: *python_image
    commands:
      - |
        if [ -f "venv/bin/activate" ]; then . venv/bin/activate; fi
        pip install build
        python -m build
        ls -la dist/
    when:
      - event: [push, pull_request]
      - event: tag
    depends_on:
      - lint
      - type-check
      - test

  # Documentation build
  docs:
    image: *python_image
    commands:
      - |
        if [ -f "venv/bin/activate" ]; then . venv/bin/activate; fi
        if [ -d "docs" ]; then
          pip install sphinx sphinx-rtd-theme
          cd docs && make html
          echo "Documentation built at docs/_build/html/"
        fi
    when:
      - event: push
      - branch: [main, develop]
    depends_on:
      - install
    failure: ignore

  # Save cache
  rebuild-cache:
    image: meltwater/drone-cache:latest
    settings:
      backend: "filesystem"
      rebuild: true
      cache_key: "python-${DRONE_REPO_NAME}-{{ checksum \"requirements.txt\" }}"
      mount:
        - .cache/pip
        - venv
    when:
      - event: push
      - branch: [main, develop]
    depends_on:
      - install

  # Docker build for Python
  docker-build:
    image: docker:24-cli
    commands:
      - |
        # Create optimized Dockerfile if not exists
        if [ ! -f Dockerfile ]; then
          cat > Dockerfile << 'EOF'
        FROM python:${PYTHON_VERSION}-slim AS base
        ENV PYTHONDONTWRITEBYTECODE=1 \
            PYTHONUNBUFFERED=1 \
            PIP_NO_CACHE_DIR=1 \
            PIP_DISABLE_PIP_VERSION_CHECK=1

        FROM base AS deps
        WORKDIR /app
        COPY requirements.txt .
        RUN pip install --no-cache-dir -r requirements.txt

        FROM base AS runtime
        WORKDIR /app
        RUN groupadd -r appuser && useradd -r -g appuser appuser
        COPY --from=deps /usr/local/lib/python3.*/site-packages /usr/local/lib/python3.*/site-packages
        COPY --chown=appuser:appuser . .
        USER appuser
        EXPOSE 8000
        CMD ["python", "-m", "uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000"]
        EOF
        fi
      - docker build -t ${DRONE_REPO_NAME}:${DRONE_COMMIT_SHA:0:8} .
    when:
      - event: push
      - branch: [main, develop]
    depends_on:
      - build
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

# Python specific services
services:
  postgres:
    image: postgres:17.5-alpine
    environment:
      - POSTGRES_USER=test
      - POSTGRES_PASSWORD=test
      - POSTGRES_DB=test_db
    when:
      - event: [push, pull_request]

  redis:
    image: redis:7-alpine
    when:
      - event: [push, pull_request]

# Python version matrix
matrix:
  include:
    - PYTHON_VERSION: "3.10"
      PYTHON_IMAGE: "python:3.10-slim"
    - PYTHON_VERSION: "3.11"
      PYTHON_IMAGE: "python:3.11-slim"
    - PYTHON_VERSION: "3.12"
      PYTHON_IMAGE: "python:3.12-slim"