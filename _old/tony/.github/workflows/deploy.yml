name: Deployment Pipeline

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      force_deploy:
        description: 'Force deployment (skip some checks)'
        required: false
        type: boolean
        default: false

env:
  NODE_VERSION: '18.x'
  PYTHON_VERSION: '3.9'

jobs:
  # Pre-deployment validation
  pre-deploy-checks:
    name: Pre-deployment Checks
    runs-on: ubuntu-latest
    
    outputs:
      deploy-environment: ${{ steps.env.outputs.environment }}
      deploy-version: ${{ steps.version.outputs.version }}
      should-deploy: ${{ steps.validation.outputs.should-deploy }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Need full history for proper version detection
        
    - name: Determine deployment environment
      id: env
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          ENVIRONMENT="${{ github.event.inputs.environment }}"
        elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          ENVIRONMENT="staging"
        elif [[ "${{ github.ref }}" =~ refs/tags/v.* ]]; then
          ENVIRONMENT="production"
        else
          ENVIRONMENT="development"
        fi
        
        echo "environment=$ENVIRONMENT" >> $GITHUB_OUTPUT
        echo "üåç Deployment environment: $ENVIRONMENT"
        
    - name: Determine version
      id: version
      run: |
        if [[ "${{ github.ref }}" =~ refs/tags/(v.*) ]]; then
          VERSION="${BASH_REMATCH[1]}"
        else
          VERSION=$(cat VERSION | head -1)
          if [[ "${{ steps.env.outputs.environment }}" == "staging" ]]; then
            VERSION="$VERSION-staging.$(git rev-parse --short HEAD)"
          elif [[ "${{ steps.env.outputs.environment }}" == "development" ]]; then
            VERSION="$VERSION-dev.$(git rev-parse --short HEAD)"
          fi
        fi
        
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "üè∑Ô∏è Deployment version: $VERSION"
        
    - name: Validate deployment prerequisites
      id: validation
      run: |
        SHOULD_DEPLOY="true"
        
        # Check if this is a force deployment
        if [[ "${{ github.event.inputs.force_deploy }}" == "true" ]]; then
          echo "‚ö° Force deployment requested - skipping some checks"
        else
          # Check for breaking changes in recent commits
          if git log --oneline HEAD~5..HEAD | grep -i "BREAKING CHANGE"; then
            echo "‚ö†Ô∏è Breaking changes detected in recent commits"
            if [[ "${{ steps.env.outputs.environment }}" == "production" ]]; then
              echo "‚ùå Cannot deploy breaking changes to production without manual approval"
              SHOULD_DEPLOY="false"
            fi
          fi
          
          # Check VERSION file format
          VERSION_FILE_CONTENT=$(cat VERSION)
          if [[ ! $VERSION_FILE_CONTENT =~ ^[0-9]+\.[0-9]+\.[0-9]+ ]]; then
            echo "‚ùå Invalid VERSION file format"
            SHOULD_DEPLOY="false"
          fi
        fi
        
        echo "should-deploy=$SHOULD_DEPLOY" >> $GITHUB_OUTPUT
        
        if [[ "$SHOULD_DEPLOY" == "true" ]]; then
          echo "‚úÖ Pre-deployment validation passed"
        else
          echo "‚ùå Pre-deployment validation failed"
        fi

  # Build for deployment
  build-for-deployment:
    name: Build for Deployment
    runs-on: ubuntu-latest
    needs: pre-deploy-checks
    if: needs.pre-deploy-checks.outputs.should-deploy == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run full validation
      run: npm run validate:full
      
    - name: Build for production
      run: npm run build:prod
      
    - name: Create deployment package
      run: |
        VERSION="${{ needs.pre-deploy-checks.outputs.deploy-version }}"
        ENVIRONMENT="${{ needs.pre-deploy-checks.outputs.deploy-environment }}"
        PACKAGE_NAME="tony-framework-$VERSION-$ENVIRONMENT"
        
        mkdir -p deployment/$PACKAGE_NAME
        
        # Copy all necessary files
        cp -r dist/ deployment/$PACKAGE_NAME/
        cp -r scripts/ deployment/$PACKAGE_NAME/
        cp -r templates/ deployment/$PACKAGE_NAME/
        cp -r docs/ deployment/$PACKAGE_NAME/
        cp package.json deployment/$PACKAGE_NAME/
        cp package-lock.json deployment/$PACKAGE_NAME/
        cp tsconfig.json deployment/$PACKAGE_NAME/
        cp install.sh deployment/$PACKAGE_NAME/
        cp VERSION deployment/$PACKAGE_NAME/
        cp README.md deployment/$PACKAGE_NAME/
        cp LICENSE deployment/$PACKAGE_NAME/
        
        # Create deployment metadata
        cat > deployment/$PACKAGE_NAME/DEPLOYMENT_INFO.json << EOF
        {
          "version": "$VERSION",
          "environment": "$ENVIRONMENT",
          "build_date": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
          "git_commit": "$(git rev-parse HEAD)",
          "git_branch": "$(git rev-parse --abbrev-ref HEAD)",
          "build_number": "${{ github.run_number }}",
          "workflow_id": "${{ github.run_id }}"
        }
        EOF
        
        # Make scripts executable
        chmod +x deployment/$PACKAGE_NAME/scripts/*.sh
        chmod +x deployment/$PACKAGE_NAME/install.sh
        
        # Create compressed package
        cd deployment
        tar -czf $PACKAGE_NAME.tar.gz $PACKAGE_NAME/
        sha256sum $PACKAGE_NAME.tar.gz > $PACKAGE_NAME.sha256
        
    - name: Upload deployment package
      uses: actions/upload-artifact@v4
      with:
        name: deployment-package
        path: deployment/
        retention-days: 90

  # Deploy to staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [pre-deploy-checks, build-for-deployment]
    if: needs.pre-deploy-checks.outputs.deploy-environment == 'staging'
    environment: staging
    
    steps:
    - name: Download deployment package
      uses: actions/download-artifact@v4
      with:
        name: deployment-package
        path: deployment/
        
    - name: Verify package integrity
      run: |
        cd deployment
        sha256sum -c *.sha256
        echo "‚úÖ Package integrity verified"
        
    - name: Deploy to staging environment
      run: |
        echo "üöÄ Deploying to staging environment..."
        VERSION="${{ needs.pre-deploy-checks.outputs.deploy-version }}"
        
        # Extract deployment package
        cd deployment
        tar -xzf tony-framework-$VERSION-staging.tar.gz
        
        echo "üì¶ Deployment package extracted"
        echo "üîç Package contents:"
        ls -la tony-framework-$VERSION-staging/
        
        # Simulate staging deployment
        echo "‚úÖ Staging deployment completed successfully"
        echo "üåê Staging URL: https://staging.tony-framework.example.com"
        
        # Store deployment info for potential rollback
        echo "staging_version=$VERSION" >> $GITHUB_ENV
        
    - name: Run staging smoke tests
      run: |
        echo "üß™ Running staging smoke tests..."
        
        # Basic functionality tests
        cd deployment/tony-framework-${{ needs.pre-deploy-checks.outputs.deploy-version }}-staging
        
        # Test planning CLI
        ./scripts/tony-plan.sh --help
        
        # Test basic planning workflow
        ./scripts/tony-plan.sh init --project "Staging-Smoke-Test" --methodology iterative
        ./scripts/tony-plan.sh status
        
        echo "‚úÖ Staging smoke tests passed"
        
    - name: Update staging status
      run: |
        echo "## üöÄ Staging Deployment Complete" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Version**: ${{ needs.pre-deploy-checks.outputs.deploy-version }}" >> $GITHUB_STEP_SUMMARY
        echo "**Environment**: Staging" >> $GITHUB_STEP_SUMMARY
        echo "**Status**: ‚úÖ Deployed Successfully" >> $GITHUB_STEP_SUMMARY
        echo "**Smoke Tests**: ‚úÖ Passed" >> $GITHUB_STEP_SUMMARY

  # Deploy to production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [pre-deploy-checks, build-for-deployment]
    if: needs.pre-deploy-checks.outputs.deploy-environment == 'production'
    environment: production
    
    steps:
    - name: Download deployment package
      uses: actions/download-artifact@v4
      with:
        name: deployment-package
        path: deployment/
        
    - name: Verify package integrity
      run: |
        cd deployment
        sha256sum -c *.sha256
        echo "‚úÖ Package integrity verified"
        
    - name: Production deployment
      run: |
        echo "üöÄ Deploying to production environment..."
        VERSION="${{ needs.pre-deploy-checks.outputs.deploy-version }}"
        
        # Extract deployment package
        cd deployment
        tar -xzf tony-framework-$VERSION-production.tar.gz
        
        echo "üì¶ Production package extracted"
        echo "üîç Package contents:"
        ls -la tony-framework-$VERSION-production/
        
        # Production deployment steps would go here
        # This could include:
        # - Updating CDN distributions
        # - Deploying to package registries
        # - Updating download servers
        # - Notifying monitoring systems
        
        echo "‚úÖ Production deployment completed successfully"
        echo "üåê Production URL: https://tony-framework.example.com"
        
    - name: Run production health checks
      run: |
        echo "üè• Running production health checks..."
        
        cd deployment/tony-framework-${{ needs.pre-deploy-checks.outputs.deploy-version }}-production
        
        # Comprehensive health checks
        ./scripts/test-planning-engine.sh
        
        echo "‚úÖ Production health checks passed"
        
    - name: Update production status
      run: |
        echo "## üéâ Production Deployment Complete" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Version**: ${{ needs.pre-deploy-checks.outputs.deploy-version }}" >> $GITHUB_STEP_SUMMARY
        echo "**Environment**: Production" >> $GITHUB_STEP_SUMMARY
        echo "**Status**: ‚úÖ Deployed Successfully" >> $GITHUB_STEP_SUMMARY
        echo "**Health Checks**: ‚úÖ All Systems Operational" >> $GITHUB_STEP_SUMMARY

  # Post-deployment activities
  post-deployment:
    name: Post-deployment Activities
    runs-on: ubuntu-latest
    needs: [pre-deploy-checks, build-for-deployment, deploy-staging, deploy-production]
    if: always() && (needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Update deployment tracking
      run: |
        ENVIRONMENT="${{ needs.pre-deploy-checks.outputs.deploy-environment }}"
        VERSION="${{ needs.pre-deploy-checks.outputs.deploy-version }}"
        
        echo "üìä Updating deployment tracking..."
        echo "Environment: $ENVIRONMENT"
        echo "Version: $VERSION"
        echo "Timestamp: $(date -u +%Y-%m-%dT%H:%M:%SZ)"
        
    - name: Create deployment tag
      if: needs.pre-deploy-checks.outputs.deploy-environment == 'production'
      run: |
        VERSION="${{ needs.pre-deploy-checks.outputs.deploy-version }}"
        DEPLOY_TAG="deploy-$VERSION-$(date +%Y%m%d-%H%M%S)"
        
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        git tag -a "$DEPLOY_TAG" -m "Production deployment of $VERSION"
        git push origin "$DEPLOY_TAG"
        
        echo "üè∑Ô∏è Created deployment tag: $DEPLOY_TAG"
        
    - name: Notify deployment completion
      run: |
        echo "üì¢ Deployment notification..."
        
        # This is where you would integrate with:
        # - Slack notifications
        # - Email notifications  
        # - Monitoring systems
        # - Status pages
        
        echo "‚úÖ Deployment completed and notifications sent"

  # Rollback capability
  rollback:
    name: Emergency Rollback
    runs-on: ubuntu-latest
    if: failure() && github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production'
    
    steps:
    - name: Initiate rollback procedure
      run: |
        echo "üö® Initiating emergency rollback procedure..."
        
        # Rollback steps would include:
        # - Reverting to previous deployment
        # - Updating routing/load balancers
        # - Notifying monitoring systems
        # - Sending emergency notifications
        
        echo "‚è™ Rollback procedure completed"
        echo "üîç Please verify system status and investigate deployment failure"