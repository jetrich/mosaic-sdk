#!/bin/bash

# Tony Framework - Vulnerability Scanner
# Automated security vulnerability detection and reporting

set -euo pipefail

SECURITY_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SECURITY_ROOT")"
source "$PROJECT_ROOT/scripts/shared/logging-utils.sh"

SCAN_LOG="$SECURITY_ROOT/logs/vulnerability-scan.log"
SCAN_REPORTS="$SECURITY_ROOT/reports"

# Run comprehensive vulnerability scan
run_vulnerability_scan() {
    local scan_type="${1:-full}"
    local scan_id="SCAN-$(date +%Y%m%d-%H%M%S)"
    
    log_info "Starting vulnerability scan (ID: $scan_id, Type: $scan_type)"
    
    # Initialize scan report
    local report_file="$SCAN_REPORTS/vulnerability-scan-$scan_id.json"
    init_scan_report "$report_file" "$scan_id" "$scan_type"
    
    # Run different scan types
    case "$scan_type" in
        "full")
            run_dependency_scan "$report_file"
            run_code_scan "$report_file"
            run_configuration_scan "$report_file"
            run_network_scan "$report_file"
            ;;
        "dependencies")
            run_dependency_scan "$report_file"
            ;;
        "code")
            run_code_scan "$report_file"
            ;;
        "config")
            run_configuration_scan "$report_file"
            ;;
        *)
            log_error "Unknown scan type: $scan_type"
            return 1
            ;;
    esac
    
    # Finalize report
    finalize_scan_report "$report_file"
    
    # Generate alerts for critical vulnerabilities
    process_scan_alerts "$report_file"
    
    log_success "Vulnerability scan completed (ID: $scan_id)"
    echo "Report: $report_file"
}

# Initialize scan report
init_scan_report() {
    local report_file="$1"
    local scan_id="$2"
    local scan_type="$3"
    
    cat > "$report_file" << SCAN_EOF
{
  "scan_id": "$scan_id",
  "scan_type": "$scan_type",
  "timestamp": "$(date -u '+%Y-%m-%dT%H:%M:%SZ')",
  "project_root": "$PROJECT_ROOT",
  "status": "running",
  "vulnerabilities": {
    "critical": [],
    "high": [],
    "medium": [],
    "low": [],
    "info": []
  },
  "summary": {
    "total_files_scanned": 0,
    "total_vulnerabilities": 0,
    "by_severity": {
      "critical": 0,
      "high": 0,
      "medium": 0,
      "low": 0,
      "info": 0
    }
  },
  "scan_modules": []
}
SCAN_EOF
}

# Run dependency vulnerability scan
run_dependency_scan() {
    local report_file="$1"
    
    log_info "Scanning dependencies for vulnerabilities..."
    
    # Check for package.json
    if [ -f "$PROJECT_ROOT/package.json" ]; then
        log_info "Found Node.js project, scanning npm dependencies..."
        
        # Run npm audit if available
        if command -v npm >/dev/null 2>&1; then
            local npm_audit_output
            npm_audit_output=$(cd "$PROJECT_ROOT" && npm audit --json 2>/dev/null || echo '{"vulnerabilities":{}}')
            
            # Parse npm audit results
            parse_npm_audit_results "$npm_audit_output" "$report_file"
        fi
    fi
    
    # Check for requirements.txt (Python)
    if [ -f "$PROJECT_ROOT/requirements.txt" ]; then
        log_info "Found Python project, scanning pip dependencies..."
        scan_python_dependencies "$report_file"
    fi
    
    # Check for go.mod (Go)
    if [ -f "$PROJECT_ROOT/go.mod" ]; then
        log_info "Found Go project, scanning Go modules..."
        scan_go_dependencies "$report_file"
    fi
    
    # Update scan modules
    update_scan_modules "$report_file" "dependencies"
}

# Run code vulnerability scan
run_code_scan() {
    local report_file="$1"
    
    log_info "Scanning code for security vulnerabilities..."
    
    # Scan for common security issues
    scan_hardcoded_secrets "$report_file"
    scan_sql_injection "$report_file"
    scan_xss_vulnerabilities "$report_file"
    scan_insecure_functions "$report_file"
    
    update_scan_modules "$report_file" "code_analysis"
}

# Run configuration scan
run_configuration_scan() {
    local report_file="$1"
    
    log_info "Scanning configuration for security issues..."
    
    # Check file permissions
    scan_file_permissions "$report_file"
    
    # Check for exposed configuration files
    scan_exposed_configs "$report_file"
    
    # Check SSL/TLS configuration
    scan_ssl_config "$report_file"
    
    update_scan_modules "$report_file" "configuration"
}

# Run network scan
run_network_scan() {
    local report_file="$1"
    
    log_info "Scanning network configuration..."
    
    # Check open ports
    scan_open_ports "$report_file"
    
    # Check firewall rules
    scan_firewall_config "$report_file"
    
    update_scan_modules "$report_file" "network"
}

# Scan for hardcoded secrets
scan_hardcoded_secrets() {
    local report_file="$1"
    
    # Common patterns for secrets
    local secret_patterns=(
        "password\s*=\s*[\"'][^\"']{8,}[\"']"
        "api[_-]?key\s*=\s*[\"'][^\"']{16,}[\"']"
        "secret\s*=\s*[\"'][^\"']{16,}[\"']"
        "token\s*=\s*[\"'][^\"']{16,}[\"']"
        "-----BEGIN\s+(RSA\s+)?PRIVATE\s+KEY-----"
    )
    
    for pattern in "${secret_patterns[@]}"; do
        while IFS= read -r line; do
            if [ -n "$line" ]; then
                local file_path
                local line_number
                local content
                file_path=$(echo "$line" | cut -d: -f1)
                line_number=$(echo "$line" | cut -d: -f2)
                content=$(echo "$line" | cut -d: -f3-)
                
                add_vulnerability "$report_file" "high" "hardcoded_secret" \
                    "Potential hardcoded secret detected" \
                    "$file_path" "$line_number" "$content"
            fi
        done < <(grep -rn -i -E "$pattern" "$PROJECT_ROOT" --include="*.js" --include="*.py" --include="*.sh" --include="*.json" --include="*.yaml" --include="*.yml" 2>/dev/null || true)
    done
}

# Add vulnerability to report
add_vulnerability() {
    local report_file="$1"
    local severity="$2"
    local type="$3"
    local description="$4"
    local file_path="$5"
    local line_number="$6"
    local details="$7"
    
    local vuln_id="VULN-$(date +%s)-$(shuf -i 1000-9999 -n 1)"
    
    # Create vulnerability object
    local vuln_json
    vuln_json=$(cat << VULN_EOF
{
  "id": "$vuln_id",
  "type": "$type",
  "severity": "$severity",
  "description": "$description",
  "file": "$file_path",
  "line": "$line_number",
  "details": "$details",
  "timestamp": "$(date -u '+%Y-%m-%dT%H:%M:%SZ')"
}
VULN_EOF
)
    
    # Add to report
    local tmp_file="$report_file.tmp"
    jq ".vulnerabilities.$severity += [$vuln_json] | .summary.by_severity.$severity += 1 | .summary.total_vulnerabilities += 1" \
        --argjson vuln_json "$vuln_json" "$report_file" > "$tmp_file" && mv "$tmp_file" "$report_file"
}

# Update scan modules
update_scan_modules() {
    local report_file="$1"
    local module="$2"
    
    local tmp_file="$report_file.tmp"
    jq ".scan_modules += [\"$module\"]" "$report_file" > "$tmp_file" && mv "$tmp_file" "$report_file"
}

# Finalize scan report
finalize_scan_report() {
    local report_file="$1"
    
    local tmp_file="$report_file.tmp"
    jq '.status = "completed" | .completed_at = "'"$(date -u '+%Y-%m-%dT%H:%M:%SZ')"'"' \
        "$report_file" > "$tmp_file" && mv "$tmp_file" "$report_file"
}

# Process scan alerts
process_scan_alerts() {
    local report_file="$1"
    
    # Check for critical vulnerabilities
    local critical_count
    critical_count=$(jq -r '.summary.by_severity.critical' "$report_file")
    
    if [ "$critical_count" -gt 0 ]; then
        log_error "CRITICAL: $critical_count critical vulnerabilities found!"
        
        # Generate alert
        local alert_file="$SECURITY_ROOT/monitoring/alerts/critical-vulnerabilities-$(date +%Y%m%d-%H%M%S).json"
        generate_vulnerability_alert "$report_file" "$alert_file" "critical"
    fi
}

# Generate vulnerability alert
generate_vulnerability_alert() {
    local report_file="$1"
    local alert_file="$2"
    local severity="$3"
    
    local vulnerabilities
    vulnerabilities=$(jq -r ".vulnerabilities.$severity" "$report_file")
    
    cat > "$alert_file" << ALERT_EOF
{
  "alert_type": "vulnerability_detected",
  "severity": "$severity",
  "timestamp": "$(date -u '+%Y-%m-%dT%H:%M:%SZ')",
  "scan_report": "$report_file",
  "vulnerabilities": $vulnerabilities,
  "action_required": true,
  "escalation_level": "immediate"
}
ALERT_EOF

    log_warning "Vulnerability alert generated: $alert_file"
}

# Main execution
if [ "${BASH_SOURCE[0]}" = "${0}" ]; then
    run_vulnerability_scan "${1:-full}"
fi
