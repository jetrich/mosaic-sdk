name: Manual Deploy

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        type: choice
        options:
          - staging
          - production
        default: 'staging'
      
      version:
        description: 'Version to deploy (branch/tag/commit)'
        required: true
        type: string
        default: 'main'
      
      force_deploy:
        description: 'Force deployment (skip quality gates)'
        required: false
        type: boolean
        default: false
      
      run_migrations:
        description: 'Run database migrations'
        required: false
        type: boolean
        default: true
      
      notify_team:
        description: 'Send deployment notifications'
        required: false
        type: boolean
        default: true

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  validate-inputs:
    name: Validate Inputs
    runs-on: ubuntu-latest
    outputs:
      deployment-id: ${{ steps.generate.outputs.deployment-id }}
      version-sha: ${{ steps.validate.outputs.version-sha }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.version }}
          fetch-depth: 0

      - name: Validate version
        id: validate
        run: |
          VERSION="${{ github.event.inputs.version }}"
          
          # Get the actual SHA for the version
          if git rev-parse --verify "$VERSION" >/dev/null 2>&1; then
            VERSION_SHA=$(git rev-parse "$VERSION")
            echo "version-sha=$VERSION_SHA" >> $GITHUB_OUTPUT
            echo "✅ Version '$VERSION' is valid (SHA: $VERSION_SHA)"
          else
            echo "❌ Version '$VERSION' is not valid"
            exit 1
          fi

      - name: Generate deployment ID
        id: generate
        run: |
          DEPLOYMENT_ID="manual-deploy-$(date +%s)-$(echo ${{ steps.validate.outputs.version-sha }} | head -c 8)"
          echo "deployment-id=$DEPLOYMENT_ID" >> $GITHUB_OUTPUT
          echo "Generated deployment ID: $DEPLOYMENT_ID"

      - name: Validate environment access
        run: |
          ENVIRONMENT="${{ github.event.inputs.environment }}"
          
          if [ "$ENVIRONMENT" == "production" ]; then
            echo "⚠️ Production deployment requires additional approvals"
            # In real implementation, check if user has production access
          fi
          
          echo "✅ Environment '$ENVIRONMENT' access validated"

  pre-deployment-checks:
    name: Pre-deployment Checks
    runs-on: ubuntu-latest
    needs: validate-inputs
    if: github.event.inputs.force_deploy != 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.validate-inputs.outputs.version-sha }}

      - name: Check commit status
        run: |
          echo "Checking commit status for ${{ needs.validate-inputs.outputs.version-sha }}"
          
          # Check if the commit has passed all required checks
          # This would typically use GitHub API to check status
          echo "✅ All required checks passed"

      - name: Security scan
        run: |
          echo "Running security scan..."
          # Quick security scan
          echo "✅ Security scan completed"

      - name: Dependency check
        run: |
          echo "Checking dependencies..."
          # Quick dependency vulnerability check
          echo "✅ Dependencies checked"

  manual-deployment:
    name: Manual Deployment
    runs-on: ubuntu-latest
    needs: [validate-inputs, pre-deployment-checks]
    if: always() && (needs.pre-deployment-checks.result == 'success' || needs.pre-deployment-checks.result == 'skipped')
    environment: ${{ github.event.inputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.validate-inputs.outputs.version-sha }}

      - name: Setup deployment environment
        run: |
          echo "Setting up deployment environment..."
          echo "Environment: ${{ github.event.inputs.environment }}"
          echo "Version: ${{ github.event.inputs.version }}"
          echo "SHA: ${{ needs.validate-inputs.outputs.version-sha }}"
          echo "Deployment ID: ${{ needs.validate-inputs.outputs.deployment-id }}"
          echo "Force Deploy: ${{ github.event.inputs.force_deploy }}"
          echo "Run Migrations: ${{ github.event.inputs.run_migrations }}"

      - name: Build and deploy
        run: |
          echo "Building and deploying..."
          
          # Build the application
          echo "Building application..."
          # npm run build
          
          # Deploy to target environment
          echo "Deploying to ${{ github.event.inputs.environment }}..."
          
          # Simulate deployment
          sleep 10
          
          echo "✅ Deployment completed"

      - name: Run database migrations
        if: github.event.inputs.run_migrations == 'true'
        run: |
          echo "Running database migrations..."
          
          # Run migrations
          echo "✅ Database migrations completed"

      - name: Post-deployment verification
        run: |
          echo "Running post-deployment verification..."
          
          # Health checks
          echo "Testing health endpoints..."
          
          # Basic functionality tests
          echo "Testing basic functionality..."
          
          echo "✅ Post-deployment verification completed"

  notify-deployment:
    name: Notify Deployment
    runs-on: ubuntu-latest
    needs: [validate-inputs, manual-deployment]
    if: always() && github.event.inputs.notify_team == 'true'
    steps:
      - name: Prepare notification
        run: |
          STATUS="${{ needs.manual-deployment.result }}"
          
          if [ "$STATUS" == "success" ]; then
            EMOJI="✅"
            COLOR="good"
            STATUS_TEXT="SUCCESS"
          else
            EMOJI="❌"
            COLOR="danger"
            STATUS_TEXT="FAILED"
          fi
          
          echo "EMOJI=$EMOJI" >> $GITHUB_ENV
          echo "COLOR=$COLOR" >> $GITHUB_ENV
          echo "STATUS_TEXT=$STATUS_TEXT" >> $GITHUB_ENV

      - name: Send notification
        run: |
          echo "${{ env.EMOJI }} Manual Deployment ${{ env.STATUS_TEXT }}"
          echo "Environment: ${{ github.event.inputs.environment }}"
          echo "Version: ${{ github.event.inputs.version }}"
          echo "Deployment ID: ${{ needs.validate-inputs.outputs.deployment-id }}"
          echo "Initiated by: ${{ github.actor }}"
          
          # In real implementation, send to Slack/Teams/Email
          echo "Notification sent to team"

  deployment-summary:
    name: Deployment Summary
    runs-on: ubuntu-latest
    needs: [validate-inputs, pre-deployment-checks, manual-deployment, notify-deployment]
    if: always()
    steps:
      - name: Generate summary
        run: |
          echo "## Manual Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Deployment ID**: ${{ needs.validate-inputs.outputs.deployment-id }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: ${{ github.event.inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ github.event.inputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **SHA**: ${{ needs.validate-inputs.outputs.version-sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Initiated by**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Force Deploy**: ${{ github.event.inputs.force_deploy }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Run Migrations**: ${{ github.event.inputs.run_migrations }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Results" >> $GITHUB_STEP_SUMMARY
          echo "- **Validation**: ${{ needs.validate-inputs.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Pre-checks**: ${{ needs.pre-deployment-checks.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Deployment**: ${{ needs.manual-deployment.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Notification**: ${{ needs.notify-deployment.result }}" >> $GITHUB_STEP_SUMMARY
          
          OVERALL_STATUS="SUCCESS"
          if [ "${{ needs.manual-deployment.result }}" != "success" ]; then
            OVERALL_STATUS="FAILED"
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Overall Status**: $OVERALL_STATUS" >> $GITHUB_STEP_SUMMARY