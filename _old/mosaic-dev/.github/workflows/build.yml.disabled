name: Build

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-backend:
    name: Build Backend (NestJS)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18, 20]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: Cache backend dependencies
        uses: actions/cache@v4
        with:
          path: |
            backend/node_modules
            ~/.npm
          key: ${{ runner.os }}-backend-${{ hashFiles('backend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-backend-

      - name: Install root dependencies
        run: npm ci

      - name: Install backend dependencies
        run: cd backend && npm ci

      - name: Build backend
        run: cd backend && npm run build

      - name: Cache backend build
        uses: actions/cache@v4
        with:
          path: backend/dist
          key: ${{ runner.os }}-backend-build-${{ github.sha }}

      - name: Upload backend build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: backend-build-node-${{ matrix.node-version }}
          path: backend/dist/
          retention-days: 7

  build-frontend:
    name: Build Frontend (React)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18, 20]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: Cache frontend dependencies
        uses: actions/cache@v4
        with:
          path: |
            frontend/node_modules
            ~/.npm
          key: ${{ runner.os }}-frontend-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-frontend-

      - name: Install root dependencies
        run: npm ci

      - name: Install frontend dependencies
        run: cd frontend && npm ci

      - name: Build frontend
        run: cd frontend && npm run build
        env:
          CI: false
          GENERATE_SOURCEMAP: false

      - name: Cache frontend build
        uses: actions/cache@v4
        with:
          path: frontend/build
          key: ${{ runner.os }}-frontend-build-${{ github.sha }}

      - name: Upload frontend build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build-node-${{ matrix.node-version }}
          path: frontend/build/
          retention-days: 7

  build-containers:
    name: Build and Test Containers
    runs-on: ubuntu-latest
    needs: [build-backend, build-frontend]
    strategy:
      matrix:
        service: [api, frontend, terminal]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Download backend build artifacts
        if: matrix.service == 'api'
        uses: actions/download-artifact@v4
        with:
          name: backend-build-node-18
          path: backend/dist/

      - name: Download frontend build artifacts
        if: matrix.service == 'frontend'
        uses: actions/download-artifact@v4
        with:
          name: frontend-build-node-18
          path: frontend/build/

      - name: Build ${{ matrix.service }} container
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.${{ matrix.service }}
          push: false
          tags: tony-ng-${{ matrix.service }}:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test container startup
        run: |
          docker run --rm -d --name test-${{ matrix.service }} \
            -p 3000:3000 \
            tony-ng-${{ matrix.service }}:test
          
          # Wait for container to start
          sleep 10
          
          # Check if container is running
          if ! docker ps | grep -q test-${{ matrix.service }}; then
            echo "Container failed to start"
            docker logs test-${{ matrix.service }}
            exit 1
          fi
          
          # Stop container
          docker stop test-${{ matrix.service }}

      - name: Scan container for vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: tony-ng-${{ matrix.service }}:test
          format: 'sarif'
          output: 'trivy-${{ matrix.service }}-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-${{ matrix.service }}-results.sarif'

  build-validation:
    name: Build Validation
    runs-on: ubuntu-latest
    needs: [build-backend, build-frontend, build-containers]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Validate build artifacts
        run: |
          echo "Validating build artifacts..."
          
          # Check backend build
          if [ ! -f "./artifacts/backend-build-node-18/main.js" ]; then
            echo "Backend build missing main.js"
            exit 1
          fi
          
          # Check frontend build
          if [ ! -f "./artifacts/frontend-build-node-18/index.html" ]; then
            echo "Frontend build missing index.html"
            exit 1
          fi
          
          # Check build sizes
          BACKEND_SIZE=$(du -s ./artifacts/backend-build-node-18 | cut -f1)
          FRONTEND_SIZE=$(du -s ./artifacts/frontend-build-node-18 | cut -f1)
          
          echo "Backend build size: ${BACKEND_SIZE}KB"
          echo "Frontend build size: ${FRONTEND_SIZE}KB"
          
          # Validate reasonable build sizes (not too small, not too large)
          if [ $BACKEND_SIZE -lt 100 ] || [ $BACKEND_SIZE -gt 100000 ]; then
            echo "Backend build size seems unusual: ${BACKEND_SIZE}KB"
            exit 1
          fi
          
          if [ $FRONTEND_SIZE -lt 100 ] || [ $FRONTEND_SIZE -gt 50000 ]; then
            echo "Frontend build size seems unusual: ${FRONTEND_SIZE}KB"
            exit 1
          fi

      - name: Generate build report
        run: |
          cat > build-report.json << EOF
          {
            "build_time": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "commit_sha": "${{ github.sha }}",
            "branch": "${{ github.ref_name }}",
            "backend_size_kb": $(du -s ./artifacts/backend-build-node-18 | cut -f1),
            "frontend_size_kb": $(du -s ./artifacts/frontend-build-node-18 | cut -f1),
            "node_versions_tested": ["18", "20"],
            "containers_built": ["api", "frontend", "terminal"],
            "status": "success"
          }
          EOF

      - name: Upload build report
        uses: actions/upload-artifact@v4
        with:
          name: build-report
          path: build-report.json
          retention-days: 30

  notify-build-status:
    name: Notify Build Status
    runs-on: ubuntu-latest
    needs: [build-validation]
    if: always()
    steps:
      - name: Notify on success
        if: needs.build-validation.result == 'success'
        run: |
          echo "✅ Build completed successfully"
          echo "All components built and validated"

      - name: Notify on failure
        if: needs.build-validation.result == 'failure'
        run: |
          echo "❌ Build failed"
          echo "Check logs for details"
          exit 1