name: Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  POSTGRES_DB: tony_ng_test
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres
  REDIS_PASSWORD: redis

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        component: [backend, frontend]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ${{ matrix.component }}/node_modules
            ~/.npm
          key: ${{ runner.os }}-${{ matrix.component }}-${{ hashFiles(format('{0}/package-lock.json', matrix.component)) }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.component }}-

      - name: Install root dependencies
        run: npm ci

      - name: Install component dependencies
        run: cd ${{ matrix.component }} && npm ci

      - name: Run unit tests
        run: cd ${{ matrix.component }} && npm run test -- --coverage --watchAll=false
        env:
          CI: true
          NODE_ENV: test

      - name: Generate coverage report
        run: |
          cd ${{ matrix.component }}
          if [ -f coverage/lcov.info ]; then
            echo "Coverage report generated successfully"
          else
            echo "No coverage report found"
            exit 1
          fi

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ${{ matrix.component }}/coverage/lcov.info
          flags: ${{ matrix.component }}-unit
          name: codecov-${{ matrix.component }}-unit
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Check coverage threshold
        run: |
          cd ${{ matrix.component }}
          
          # Extract coverage percentage from coverage summary
          if [ -f coverage/coverage-summary.json ]; then
            COVERAGE=$(node -e "console.log(JSON.parse(require('fs').readFileSync('coverage/coverage-summary.json')).total.lines.pct)")
          else
            echo "Coverage summary not found"
            exit 1
          fi
          
          echo "Coverage: ${COVERAGE}%"
          
          # Check if coverage meets threshold
          if (( $(echo "$COVERAGE < 80" | bc -l) )); then
            echo "❌ Coverage ${COVERAGE}% is below 80% threshold"
            exit 1
          else
            echo "✅ Coverage ${COVERAGE}% meets threshold"
          fi

      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.component }}-unit
          path: |
            ${{ matrix.component }}/coverage/
            ${{ matrix.component }}/test-results.xml
          retention-days: 7

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:17-alpine
        env:
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:8-alpine
        env:
          REDIS_PASSWORD: ${{ env.REDIS_PASSWORD }}
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 3s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: Install dependencies
        run: npm run install:all

      - name: Wait for services
        run: |
          echo "Waiting for PostgreSQL..."
          until pg_isready -h localhost -p 5432 -U ${{ env.POSTGRES_USER }}; do
            sleep 1
          done
          
          echo "Waiting for Redis..."
          until redis-cli -h localhost -p 6379 ping; do
            sleep 1
          done

      - name: Setup database
        run: |
          cd backend
          npm run migration:run
        env:
          DATABASE_URL: postgresql://${{ env.POSTGRES_USER }}:${{ env.POSTGRES_PASSWORD }}@localhost:5432/${{ env.POSTGRES_DB }}

      - name: Run integration tests
        run: npm run test:integration
        env:
          DATABASE_URL: postgresql://${{ env.POSTGRES_USER }}:${{ env.POSTGRES_PASSWORD }}@localhost:5432/${{ env.POSTGRES_DB }}
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-secret
          NODE_ENV: test

      - name: Upload integration test results
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-results
          path: |
            tests/integration/results/
            coverage/integration/
          retention-days: 7

  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:17-alpine
        env:
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:8-alpine
        env:
          REDIS_PASSWORD: ${{ env.REDIS_PASSWORD }}
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 3s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: Install dependencies
        run: npm run install:all

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Build applications
        run: |
          npm run build:backend
          npm run build:frontend

      - name: Setup test environment
        run: |
          cd backend
          npm run migration:run
        env:
          DATABASE_URL: postgresql://${{ env.POSTGRES_USER }}:${{ env.POSTGRES_PASSWORD }}@localhost:5432/${{ env.POSTGRES_DB }}

      - name: Start backend server
        run: |
          cd backend
          npm run start:prod &
          sleep 10
        env:
          DATABASE_URL: postgresql://${{ env.POSTGRES_USER }}:${{ env.POSTGRES_PASSWORD }}@localhost:5432/${{ env.POSTGRES_DB }}
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-secret
          NODE_ENV: test
          PORT: 3000

      - name: Start frontend server
        run: |
          cd frontend
          npx serve -s build -l 3001 &
          sleep 5
        env:
          REACT_APP_API_URL: http://localhost:3000/api/v1

      - name: Run E2E tests
        run: npm run test:e2e
        env:
          PLAYWRIGHT_TEST_BASE_URL: http://localhost:3001
          API_BASE_URL: http://localhost:3000

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-test-results
          path: |
            test-results/
            playwright-report/
          retention-days: 7

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install k6
        run: |
          sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: Start test environment
        run: |
          docker compose up -d
          sleep 30

      - name: Run performance tests
        run: |
          k6 run tests/performance/load-test.js --out json=performance-results.json

      - name: Analyze performance results
        run: |
          # Extract key metrics
          AVG_RESPONSE_TIME=$(jq '.metrics.http_req_duration.avg' performance-results.json)
          P95_RESPONSE_TIME=$(jq '.metrics.http_req_duration.p95' performance-results.json)
          ERROR_RATE=$(jq '.metrics.http_req_failed.rate' performance-results.json)
          
          echo "Average Response Time: ${AVG_RESPONSE_TIME}ms"
          echo "95th Percentile Response Time: ${P95_RESPONSE_TIME}ms"
          echo "Error Rate: ${ERROR_RATE}%"
          
          # Check thresholds
          if (( $(echo "$AVG_RESPONSE_TIME > 1000" | bc -l) )); then
            echo "❌ Average response time too high: ${AVG_RESPONSE_TIME}ms"
            exit 1
          fi
          
          if (( $(echo "$ERROR_RATE > 0.01" | bc -l) )); then
            echo "❌ Error rate too high: ${ERROR_RATE}%"
            exit 1
          fi

      - name: Upload performance results
        uses: actions/upload-artifact@v4
        with:
          name: performance-test-results
          path: performance-results.json
          retention-days: 30

  test-report:
    name: Test Report
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, e2e-tests, performance-tests]
    if: always()
    steps:
      - name: Download all test results
        uses: actions/download-artifact@v4
        with:
          path: ./test-results

      - name: Generate test report
        run: |
          cat > test-report.json << EOF
          {
            "test_run_time": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "commit_sha": "${{ github.sha }}",
            "branch": "${{ github.ref_name }}",
            "results": {
              "unit_tests": {
                "backend": "${{ needs.unit-tests.result }}",
                "frontend": "${{ needs.unit-tests.result }}"
              },
              "integration_tests": "${{ needs.integration-tests.result }}",
              "e2e_tests": "${{ needs.e2e-tests.result }}",
              "performance_tests": "${{ needs.performance-tests.result }}"
            },
            "overall_status": "$([ '${{ needs.unit-tests.result }}' == 'success' ] && [ '${{ needs.integration-tests.result }}' == 'success' ] && [ '${{ needs.e2e-tests.result }}' == 'success' ] && echo 'success' || echo 'failure')"
          }
          EOF

      - name: Upload test report
        uses: actions/upload-artifact@v4
        with:
          name: test-report
          path: test-report.json
          retention-days: 30

      - name: Quality gate check
        run: |
          OVERALL_STATUS=$(jq -r '.overall_status' test-report.json)
          
          if [ "$OVERALL_STATUS" == "success" ]; then
            echo "✅ All tests passed - Quality gate: PASSED"
          else
            echo "❌ Some tests failed - Quality gate: FAILED"
            exit 1
          fi