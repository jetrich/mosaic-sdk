name: Tony Dev SDK CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'

jobs:
  # Job 1: Code Quality and Linting
  code-quality:
    name: üîç Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        persist-credentials: false
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linting
      run: npm run lint --if-present
      
    - name: TypeScript type check
      run: npm run type-check --if-present

  # Job 2: Unit Tests
  unit-tests:
    name: üß™ Unit Tests
    runs-on: ubuntu-latest
    needs: code-quality
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        persist-credentials: false
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run tests
      run: npm test
      
    - name: Generate coverage report
      run: npm run test:coverage --if-present
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      if: always()
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella

  # Job 3: Integration Tests
  integration-tests:
    name: üîó Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        persist-credentials: false
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run integration tests
      run: npm run test:integration --if-present

  # Job 4: E2E Tests
  e2e-tests:
    name: üé≠ E2E Tests
    runs-on: ubuntu-latest
    needs: integration-tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        persist-credentials: false
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run E2E tests
      run: npm run test:e2e --if-present

  # Job 5: Performance Tests
  performance-tests:
    name: ‚ö° Performance Tests
    runs-on: ubuntu-latest
    needs: e2e-tests
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        persist-credentials: false
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run performance tests
      run: npm run test:performance --if-present

  # Job 6: Security Scan
  security-scan:
    name: üîí Security Scan
    runs-on: ubuntu-latest
    needs: code-quality
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        persist-credentials: false
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run npm audit
      run: npm audit --audit-level=high || true
        
    - name: Run security checks
      run: npm run security:check

  # Job 7: Build and Deploy
  build-and-deploy:
    name: üöÄ Build & Deploy
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, e2e-tests, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        persist-credentials: false
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build SDK
      run: npm run build --if-present
      
    - name: Package distribution
      run: npm run package --if-present
      
    - name: Create release artifacts
      run: |
        echo "üì¶ SDK built successfully"
        echo "Ready for distribution"

  # Job 8: Quality Gate
  quality-gate:
    name: ‚úÖ Quality Gate
    runs-on: ubuntu-latest
    needs: [code-quality, unit-tests, integration-tests, e2e-tests, security-scan]
    if: always()
    
    steps:
    - name: Check all jobs status
      run: |
        # Check each job result
        FAILED=false
        
        if [[ "${{ needs.code-quality.result }}" != "success" ]]; then
          echo "‚ùå Code Quality failed"
          FAILED=true
        fi
        
        if [[ "${{ needs.unit-tests.result }}" != "success" ]]; then
          echo "‚ùå Unit Tests failed"
          FAILED=true
        fi
        
        if [[ "${{ needs.integration-tests.result }}" != "success" && "${{ needs.integration-tests.result }}" != "skipped" ]]; then
          echo "‚ùå Integration Tests failed"
          FAILED=true
        fi
        
        if [[ "${{ needs.e2e-tests.result }}" != "success" && "${{ needs.e2e-tests.result }}" != "skipped" ]]; then
          echo "‚ùå E2E Tests failed"
          FAILED=true
        fi
        
        if [[ "${{ needs.security-scan.result }}" != "success" ]]; then
          echo "‚ö†Ô∏è  Security Scan completed with warnings"
        fi
        
        if [[ "$FAILED" == "true" ]]; then
          echo "‚ùå Quality gate FAILED"
          exit 1
        else
          echo "‚úÖ Quality gate PASSED"
        fi